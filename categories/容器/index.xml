<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>容器 on 个人博客</title><link>https://techzealot.github.io/categories/%E5%AE%B9%E5%99%A8/</link><description>Recent content in 容器 on 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 03 Mar 2023 17:46:31 +0800</lastBuildDate><atom:link href="https://techzealot.github.io/categories/%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker知识总结</title><link>https://techzealot.github.io/posts/cloud-native/docker%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 03 Mar 2023 17:46:31 +0800</pubDate><guid>https://techzealot.github.io/posts/cloud-native/docker%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid><description>docker知识总结 容器的本质 namesapce和cgroup
容器里 1 号进程对信号处理的两个要点 在容器中，1 号进程永远不会响应 SIGKILL 和 SIGSTOP 这两个特权信号；</description></item><item><title>K8S知识总结</title><link>https://techzealot.github.io/posts/cloud-native/k8s%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 03 Mar 2023 17:46:14 +0800</pubDate><guid>https://techzealot.github.io/posts/cloud-native/k8s%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid><description>k8s知识总结 容器 容器本身没有价值，有价值的是“容器编排”
Cgroups技术 是用来制造约束的主要手段，而 Namespace技术 则是用来修改进程视图的主要方法
Mount Namespace跟其他Namespace的使用略有不同的地方：它对容器进程视图的改变，一定是伴随着挂载操作（mount）才能生效
挂载在容器根目录上、用来为容器进程提供隔离后执行环境的文件系统，就是所谓的“容器镜像”。它还有一个更为专业的名字，叫作：rootfs（根文件系统）</description></item></channel></rss>