<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on 个人博客</title><link>https://techzealot.github.io/tags/spring/</link><description>Recent content in spring on 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Mar 2023 23:15:17 +0800</lastBuildDate><atom:link href="https://techzealot.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring循环依赖与三级缓存</title><link>https://techzealot.github.io/posts/spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%8E%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</link><pubDate>Tue, 28 Mar 2023 23:15:17 +0800</pubDate><guid>https://techzealot.github.io/posts/spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%8E%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</guid><description>spring循环依赖与三级缓存 单例对象三级缓存出处 //org.springframework.beans.factory.support.DefaultSingletonBeanRegistry /** Cache of singleton objects: bean name to bean instance.</description></item><item><title>Springboot</title><link>https://techzealot.github.io/posts/springboot/</link><pubDate>Fri, 17 Mar 2023 18:48:20 +0800</pubDate><guid>https://techzealot.github.io/posts/springboot/</guid><description>springboot知识总结 bootstrap phase bootstrap阶段是springboot中为应用容器准备启动环境的阶段。该阶段最先运行，会产生BootstrapContext，为ApplicationContext准备配置文件，加载其他需要资源。BootstrapContext为ApplicationContext的父容器，其中的配置属性和Bean对于子容器均可见。该阶段会读取bootstrap.yml(properties)配置文件并存储于BootstrapContext，以便与ApplicationContext相关配置隔离。
应用：
配置远程配置中心地址并从中获取应用配置，如Apollo和spring cloud config 可以作为测试上下文所需资源的承载环境，如**testcontainers-spring-boot** 注意事项：</description></item><item><title>Spring事务</title><link>https://techzealot.github.io/posts/spring%E4%BA%8B%E5%8A%A1/</link><pubDate>Thu, 16 Mar 2023 16:58:08 +0800</pubDate><guid>https://techzealot.github.io/posts/spring%E4%BA%8B%E5%8A%A1/</guid><description>spring事务 声明式事务 声明式事务底层由spring AOP支持
引入依赖spring-boot-starter-jdbc即可使用开箱即用的声明式事务支持
@Service public class OrderService { @Autowired private StoreService storeService; @Transactional(rollbackFor = Exception.</description></item></channel></rss>