<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ArrayList on 个人博客</title><link>https://techzealot.github.io/tags/arraylist/</link><description>Recent content in ArrayList on 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 05 Aug 2022 17:59:47 +0800</lastBuildDate><atom:link href="https://techzealot.github.io/tags/arraylist/index.xml" rel="self" type="application/rss+xml"/><item><title>ArrayList源码分析</title><link>https://techzealot.github.io/posts/jcf/arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Fri, 05 Aug 2022 17:59:47 +0800</pubDate><guid>https://techzealot.github.io/posts/jcf/arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description> 本质:底层使用数组，超出数组容量后会扩容50%并将数据拷贝到新数组对应位置 序列化的优化:仅序列化存有元素的数据,不序列化未使用数组部分 使用modCount做简化的并发检测，并不能做到并发安全，可以控制使用迭代器时无法修改集合，仅能通过迭代器提供的操作进行处理 Collection#toArray接口要求返回一个新的存有集合数据的数组，不能返回底层数组防止被意外修改影响原集合功能</description></item></channel></rss>